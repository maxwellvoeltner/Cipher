{"ast":null,"code":"function encrypt(message, keyword) {\n  message = message.replace(/[^a-zA-Z]/g, '').toUpperCase();\n  keyword = keyword.replace(/[^a-zA-Z]/g, '').toUpperCase();\n  let encryptedMessage = '';\n  let keywordIndex = 0;\n  for (let i = 0; i < message.length; i++) {\n    const messageChar = message.charCodeAt(i) - 65;\n    const keywordChar = keyword.charCodeAt(keywordIndex % keyword.length) - 65;\n    const encryptedChar = String.fromCharCode((messageChar + keywordChar) % 26 + 65);\n    encryptedMessage += encryptedChar;\n    keywordIndex++;\n  }\n  return encryptedMessage;\n}\n\n// Example usage:\nconst message = \"HELLO WORLD\";\nconst keyword = \"KEY\";\nconst encryptedMessage = encrypt(message, keyword);\nconsole.log(encryptedMessage); // Output will be the encrypted message","map":{"version":3,"names":["encrypt","message","keyword","replace","toUpperCase","encryptedMessage","keywordIndex","i","length","messageChar","charCodeAt","keywordChar","encryptedChar","String","fromCharCode","console","log"],"sources":["C:/Users/mvoeltner/dianecipher/frontend/src/functions/encrypt.js"],"sourcesContent":["function encrypt(message, keyword) {\r\n    \r\n    message = message.replace(/[^a-zA-Z]/g, '').toUpperCase();\r\n    keyword = keyword.replace(/[^a-zA-Z]/g, '').toUpperCase();\r\n    \r\n    let encryptedMessage = '';\r\n    let keywordIndex = 0;\r\n\r\n    for (let i = 0; i < message.length; i++) {\r\n        const messageChar = message.charCodeAt(i) - 65;\r\n        const keywordChar = keyword.charCodeAt(keywordIndex % keyword.length) - 65;\r\n\r\n        const encryptedChar = String.fromCharCode((messageChar + keywordChar) % 26 + 65);\r\n        encryptedMessage += encryptedChar;\r\n\r\n        keywordIndex++;\r\n    }\r\n\r\n    return encryptedMessage;\r\n}\r\n\r\n// Example usage:\r\nconst message = \"HELLO WORLD\";\r\nconst keyword = \"KEY\";\r\nconst encryptedMessage = encrypt(message, keyword);\r\nconsole.log(encryptedMessage); // Output will be the encrypted message\r\n"],"mappings":"AAAA,SAASA,OAAOA,CAACC,OAAO,EAAEC,OAAO,EAAE;EAE/BD,OAAO,GAAGA,OAAO,CAACE,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC,CAACC,WAAW,CAAC,CAAC;EACzDF,OAAO,GAAGA,OAAO,CAACC,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC,CAACC,WAAW,CAAC,CAAC;EAEzD,IAAIC,gBAAgB,GAAG,EAAE;EACzB,IAAIC,YAAY,GAAG,CAAC;EAEpB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,OAAO,CAACO,MAAM,EAAED,CAAC,EAAE,EAAE;IACrC,MAAME,WAAW,GAAGR,OAAO,CAACS,UAAU,CAACH,CAAC,CAAC,GAAG,EAAE;IAC9C,MAAMI,WAAW,GAAGT,OAAO,CAACQ,UAAU,CAACJ,YAAY,GAAGJ,OAAO,CAACM,MAAM,CAAC,GAAG,EAAE;IAE1E,MAAMI,aAAa,GAAGC,MAAM,CAACC,YAAY,CAAC,CAACL,WAAW,GAAGE,WAAW,IAAI,EAAE,GAAG,EAAE,CAAC;IAChFN,gBAAgB,IAAIO,aAAa;IAEjCN,YAAY,EAAE;EAClB;EAEA,OAAOD,gBAAgB;AAC3B;;AAEA;AACA,MAAMJ,OAAO,GAAG,aAAa;AAC7B,MAAMC,OAAO,GAAG,KAAK;AACrB,MAAMG,gBAAgB,GAAGL,OAAO,CAACC,OAAO,EAAEC,OAAO,CAAC;AAClDa,OAAO,CAACC,GAAG,CAACX,gBAAgB,CAAC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}